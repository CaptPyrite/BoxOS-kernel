import os
import json
import zlib
import hashlib
import base64

class Errors:
    CRUCIAL_FILE_DOESNT_EXIST = b'x\x9cs.*M\xceL\xccQH\xcb\xccIU\xc8\xcb/QH\xcb/\xcdK\x01\x00]M\x081'
    MISSING_DATA = b'x\x9c\xf3\xcc-\xc8/*I\xcc+QHJL\xce\xd6M\xcdKQHI,IT\xc8\xcd,.\xce\xccK\x07\x00\xbam\x0b\xa8'

        

class Disk():
    def __init__(self,fsys="../Disk/FSystem-manager.json"):
        self.fsys = fsys
        self.manager_exists = os.path.exists(self.fsys)
        self.errors = []
        self.last_loc = None
        
        if self.manager_exists:
            system_open_read = open(self.fsys,"r")
            try:    
                self.system_data = json.loads(system_open_read.read())
                system_open_read.close()
            except:
                 self.errors.append(Errors.MISSING_DATA)
        else:
            self.errors.append(Errors.CRUCIAL_FILE_DOESNT_EXIST)
    
    def Disk_errors(self) -> list:
        return "\n".join([zlib.decompress(v).decode("utf-8") for v in self.errors]),(len(self.errors)==0)
    
    
    def _change_loc(self,location) -> int:
        for j,i in enumerate(location):
          if j == 0:
            self.last_loc = self.system_data[i]
          else:
            self.last_loc = self.last_loc[i]
    
    
    def New_file(self,file:str,data=None) -> bool:
        location = file.split("\\")
        file_name = location[-1:][0]
        if self.Disk_errors()[1]:
            self._change_loc(location[:-1])
            encoded_name = hashlib.sha256(file.encode('utf-8')).hexdigest()
            self.last_loc[file_name]=encoded_name
            
            f = open("Disk\\"+encoded_name+".file","wb")
            f.write(base64.b64encode(data.encode('ascii')))
            f.close()
            self.update_disk()
            
            
    def New_dir(self,location:str) -> bool:
        location = location.split("\\")
        file_name = location[-1:][0]
        if self.Disk_errors()[1]:
            self._change_loc(location[:-1])
            self.last_loc[file_name]={}
            self.update_disk()
            
    def Delete_file(self,file:str,DEL_SHAFILE=True) -> bool:
        location = file.split("\\")
        file_name = location[-1:][0]
        if self.Disk_errors()[1]:
            self._change_loc(location[:-1])
            del self.last_loc[file_name]
            if DEL_SHAFILE:
                os.remove("\\".join(self.fsys.split("\\")[:-1])+"\\"+hashlib.sha256(file.encode('utf-8')).hexdigest()+".file")
            self.update_disk()
    
    def Delete_dir(self,file:str) -> bool:
        location = file.split("\\")
        file_name = location[-1:][0]
        if self.Disk_errors()[1]:
            self._change_loc(location[:-1])
            
            def get_files_in_dirs(d):
              def listize(d):
                result = {}
                for key, value in d.items():
                  if isinstance(value, dict):
                    result.update(listize(value))
                  else:
                    result[key] = value 
                return result
              
              return list(listize(d).values())

            for files in get_files_in_dirs(self.last_loc[file_name]):
                os.remove("\\".join(self.fsys.split("\\")[:-1])+"\\"+str(files)+".file" )
            
            del self.last_loc[file_name]
            
            self.update_disk()
        
    def File_exists(self,name:str) -> bool:
        location = name.split("\\")
        file_name = location[-1:][0]
        self._change_loc(location[:-1])
        return file_name in self.last_loc
    
    def _view_disk(self):
        return self.system_data
    
    def update_disk(self):
        open(self.fsys,"w").write(json.dumps(self._view_disk(),indent=2))